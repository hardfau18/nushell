diff --git a/crates/nu-command/src/filesystem/cd.rs b/crates/nu-command/src/filesystem/cd.rs
index 18ce5a5df..e0e36fb90 100644
--- a/crates/nu-command/src/filesystem/cd.rs
+++ b/crates/nu-command/src/filesystem/cd.rs
@@ -271,7 +271,14 @@ fn have_permission(dir: impl AsRef<Path>) -> PermissionResult<'static> {
     }
 }
 
-#[cfg(unix)]
+#[cfg(any(target_os="linux", target_os="android" ))]
+fn any_group(_current_user_gid: gid_t, owner_group: u32) -> bool {
+    use crate::filesystem::util::users;
+    let Some(user_groups) = users::current_user_groups() else {return false};
+    user_groups.iter().any(|gid| gid.as_raw() == owner_group)
+}
+
+#[cfg(all(unix, not(any(target_os="linux", target_os = "android"))))]
 fn any_group(current_user_gid: gid_t, owner_group: u32) -> bool {
     use crate::filesystem::util::users;
 
diff --git a/crates/nu-command/src/filesystem/util.rs b/crates/nu-command/src/filesystem/util.rs
index ef95953c0..387f1b7c2 100644
--- a/crates/nu-command/src/filesystem/util.rs
+++ b/crates/nu-command/src/filesystem/util.rs
@@ -192,6 +192,32 @@ pub mod users {
             .map(|user| user.name)
     }
 
+#[cfg(any(target_os="linux", target_os="android" ))]
+    pub fn current_user_groups() -> Option<Vec<Gid>> {
+        // SAFETY:
+        // if first arg is 0 then it ignores second argument and returns number of groups present for given user.
+        // +1 
+        let ngroups = unsafe { libc::getgroups(0,core::ptr::null::<gid_t> as *mut _) }+1;
+        let mut buff: Vec<gid_t> = vec![0; ngroups as usize];
+
+
+        // SAFETY:
+        // buff is the size of ngroups and  getgroups reads max ngroups elements into buff
+        let found = unsafe { libc::getgroups(ngroups,buff.as_mut_ptr()) };
+
+        if found < 0 {
+            None
+        } else {
+            buff.truncate(ngroups as usize);
+            buff.sort_unstable();
+            buff.dedup();
+            buff.into_iter()
+                .filter_map(|i| get_group_by_gid(i as gid_t))
+                .map(|group| group.gid)
+                .collect::<Vec<_>>()
+                .into()
+        }
+    }
     /// Returns groups for a provided user name and primary group id.
     ///
     /// # libc functions used
